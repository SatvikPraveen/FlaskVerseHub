# .github/workflows/ci.yml
name: Continuous Integration

# Trigger CI on push to main/develop branches and all pull requests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  # Allow manual triggering of the workflow
  workflow_dispatch:

# Set environment variables for the entire workflow
env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  POSTGRES_VERSION: "15"

jobs:
  # Job 1: Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Node.js dependencies
        run: |
          npm install
          npm install -g eslint stylelint

      - name: Run Python linting (flake8)
        run: |
          flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Run Python formatting check (black)
        run: |
          black --check --diff app/ tests/

      - name: Run Python import sorting (isort)
        run: |
          isort --check-only --diff app/ tests/

      - name: Run Python type checking (mypy)
        run: |
          mypy app/ --ignore-missing-imports

      - name: Run JavaScript/CSS linting
        run: |
          eslint app/static/js/**/*.js
          stylelint app/static/css/**/*.css

      - name: Run security checks (bandit)
        run: |
          bandit -r app/ -f json -o bandit-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Job 2: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flaskversehub_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements/test.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt

      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "FLASK_ENV=testing" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/flaskversehub_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env.test

      - name: Run database migrations
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flaskversehub_test
        run: |
          flask db upgrade

      - name: Run unit tests with coverage
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flaskversehub_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

  # Job 3: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flaskversehub_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements/test.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt

      - name: Set up integration test environment
        run: |
          cp .env.example .env.integration
          echo "FLASK_ENV=testing" >> .env.integration
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/flaskversehub_integration" >> .env.integration
          echo "REDIS_URL=redis://localhost:6379/1" >> .env.integration

      - name: Run database setup
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flaskversehub_integration
        run: |
          flask db upgrade
          flask seed-data --test-data

      - name: Run integration tests
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flaskversehub_integration
          REDIS_URL: redis://localhost:6379/1
        run: |
          pytest tests/integration/ \
            --junitxml=integration-results.xml \
            -v

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-results.xml

  # Job 4: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [lint, test]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flaskversehub_api
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/test.txt

      - name: Start Flask application
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flaskversehub_api
          REDIS_URL: redis://localhost:6379/2
        run: |
          flask db upgrade
          flask run --host=0.0.0.0 --port=5000 &
          sleep 10

      - name: Run API tests with Newman (Postman)
        run: |
          npm install -g newman
          newman run tests/api/FlaskVerseHub_API_Collection.postman_collection.json \
            -e tests/api/CI_Environment.postman_environment.json \
            --reporters json,cli \
            --reporter-json-export api-test-results.json

      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: api-test-results.json

  # Job 5: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install safety pip-audit

      - name: Run dependency vulnerability scan (Safety)
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit vulnerability scan
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/flask
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Job 6: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration, api-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: flaskversehub:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container \
            -p 8000:8000 \
            -e FLASK_ENV=production \
            -e DATABASE_URL=sqlite:///test.db \
            -e SECRET_KEY=test-key \
            flaskversehub:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-container

  # Job 7: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Lighthouse
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: |
          npm install -g @lhci/cli

      - name: Set up Python and Flask app
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt

      - name: Start Flask application for performance testing
        run: |
          export FLASK_ENV=production
          export DATABASE_URL=sqlite:///perf_test.db
          export SECRET_KEY=perf-test-key
          flask db upgrade
          flask run --host=0.0.0.0 --port=5000 &
          sleep 10

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 8: Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, integration, api-tests, security, build]
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration.result == 'success' && needs.api-tests.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ All CI jobs completed successfully!"
          echo "Ready for deployment to staging/production"

      - name: Notify Failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration.result == 'failure' || needs.api-tests.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ One or more CI jobs failed!"
          echo "Please check the logs and fix issues before merging"
          exit 1
